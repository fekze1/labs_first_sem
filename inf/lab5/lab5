#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>
#include <time.h>
#include <ctype.h>
#include "src.h"

float get_rand_float(int min, int max) 
{
	srand(clock());
	return (float)(rand() * 1.0  / RAND_MAX ) * (max - min) + min;
}

int get_rand_int(int min, int max) 
{
	srand(clock());
	return rand() % (max - min + 1) + min;
}

char *get_rand_name()
{
	char *name = (char *)malloc(11 * sizeof(char) + 1);
	memcpy(name, "Agent ", 6 * sizeof(char));
	for (int i = 6; i < 11; i++) name[i] = "smith"[get_rand_int(0, 4)];
	name[11] = '\0';
	
	return name;
}

void get_rand_group(char group_ptr[8])
{
	group_ptr[0] = "SBM"[get_rand_int(0, 2)];
	group_ptr[1] = get_rand_int(0, 9) + '0';
	group_ptr[2] = get_rand_int(0, 9) + '0';
	group_ptr[3] = '-';
	group_ptr[4] = get_rand_int(0, 9) + '0';
	group_ptr[5] = get_rand_int(0, 9) + '0';
	group_ptr[6] = get_rand_int(0, 9) + '0';
	group_ptr[7] = '\0';
}

Student create_rand_student()
{	
	char *name = get_rand_name();
	name[6] = toupper(name[6]);
	char group[8];
	get_rand_group(group);
	float grade = get_rand_float(0, 5);

	return create_student(name, group, grade);
}

void free_twodim_arr( int arrays_amount, int elements_amount, Student array[][elements_amount])
{
	for (int i = 0; i < arrays_amount; i++)
	{
		for (int j = 0; j < elements_amount; j++)
		{
			free(array[i][j].full_name);
		}
	}
}

int status(char *method, char *dir, char *param, char *arrays_amount, char *elements_amount)
{	
	for (int i = 500; i < 15001; i += 500)
	{
		int arrays = atoi(arrays_amount);
		int elements = atoi(elements_amount);

		Student array[arrays][elements];

		double all_time_spent;
		double average_time = 0;
		clock_t all_start = clock();
		
		for (int i = 0; i < arrays; i++)
		{	
			clock_t start = clock();
			if (strcmp(method, "pairinsertion") == 0)
			{
				pairInsertion_sort(array[i], elements, get_cmp_ptr(param, dir));
			}
			else if (strcmp(method, "comb") == 0)
			{
				comb_sort(array[i], elements, get_cmp_ptr(param, dir));
			}
			else if (strcmp(method, "qsort") == 0)
			{
				qsort(array[i], elements, sizeof(Student), get_cmp_ptr(param, dir));
			}
			clock_t finish = clock();
			average_time += finish - start;
		}
		
		clock_t all_finish = clock();
		all_time_spent = (double)(all_finish - all_start) / CLOCKS_PER_SEC;;
		average_time /= arrays * CLOCKS_PER_SEC * 1.0;
		
		printf("total time spent: %lf seconds\n", all_time_spent);
		printf("average time spent of one array: %lf seconds\n", average_time);

		free_twodim_arr( arrays, elements, array);
	}
	return 0;
}

int main(int argc, char *argv[])
{	
	int res;
	char *sort_method;
	char *direction;
	char *parameter;
	char *arrays_amount;
	char *elements_amount;

	while ((res = getopt(argc, argv, "s:d:p:a:e:")) != -1)
	{
		switch (res)
		{
			case 's': sort_method = optarg; break;
			case 'd': direction = optarg; break;
			case 'p': parameter = optarg; break;
			case 'a': arrays_amount = optarg; break;
			case 'e': elements_amount = optarg; break;
			case '?': 
				printf("invalid value"); 
				return 0;
				break;
		}
	}

	if ((strcmp(sort_method, "pairinsertion") != 0) && (strcmp(sort_method, "comb") != 0) && (strcmp(sort_method, "qsort") != 0)) printf("invalid sort method\n");
	else if ((strcmp(direction, "increase") != 0) && (strcmp(direction, "decrease") != 0)) printf("invalid direction\n");
	else if ((strcmp(parameter, "grade") != 0) && (strcmp(parameter, "name") != 0) && (strcmp(parameter, "group") != 0)) printf("invalid parameter\n");

	else status(sort_method, direction, parameter, arrays_amount, elements_amount);
	
	return 0;
}
